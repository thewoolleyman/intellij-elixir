( &one -> )
( one \\ default -> )
( one when key: value -> )
( one when guard -> )
( one :: type -> )
( one | two -> )
( one = two -> )
( one || two -> )
( one && two -> )
( one != two -> )
( one < two -> )
( one + two -> )
( one * two -> )
( one ^^^ two -> )
( ! one -> )
( not one -> )
( Module.function positional, key: value -> )
( @function positional, key: value -> )
( function positional, key: value -> )
( One.Two[key] -> )
( Module.function[key] -> )
( Module.function() -> )
( Module.function -> )
( @variable[key] -> )
( @variable -> )
( function positional, key: value -> )
( variable[key] -> )
( variable -> )
( @1 -> )
( &1 -> )
( !1 -> )
( not 1 -> )
( fn -> end -> )
( (;) -> )
( 1 -> )
( [] -> )
( "one" -> )
( """
  one
  """ -> )
( 'one' -> )
( '''
  one
  ''' -> )
( ~x{sigil}modifiers -> )
( true -> )
( :atom -> )
( Alias -> )
